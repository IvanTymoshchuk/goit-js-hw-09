/*
–ó–∞–≤–¥–∞–Ω–Ω—è 3 - –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–º—ñ—Å—ñ–≤
HTML –º—ñ—Å—Ç–∏—Ç—å —Ä–æ–∑–º—ñ—Ç–∫—É —Ñ–æ—Ä–º–∏, –≤ –ø–æ–ª—è —è–∫–æ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –±—É–¥–µ –≤–≤–æ–¥–∏—Ç–∏ –ø–µ—Ä—à—É –∑–∞—Ç—Ä–∏–º–∫—É –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö, –∫—Ä–æ–∫ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–æ–º—ñ—Å—É –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ —ñ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–º—ñ—Å—ñ–≤, —è–∫—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏.

<form class="form">
  <label>
    First delay (ms)
    <input type="number" name="delay" required />
  </label>
  <label>
    Delay step (ms)
    <input type="number" name="step" required />
  </label>
  <label>
    Amount
    <input type="number" name="amount" required />
  </label>
  <button type="submit">Create promises</button>
</form>

–ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –Ω–∞ –º–æ–º–µ–Ω—Ç —Å–∞–±–º—ñ—Ç—É —Ñ–æ—Ä–º–∏ –≤–∏–∫–ª–∏–∫–∞—î —Ñ—É–Ω–∫—Ü—ñ—é createPromise(position, delay) —Å—Ç—ñ–ª—å–∫–∏ —Ä–∞–∑—ñ–≤, —Å–∫—ñ–ª—å–∫–∏ –≤–≤–µ–ª–∏ –≤ –ø–æ–ª–µ amount. –ü—ñ–¥ —á–∞—Å –∫–æ–∂–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –ø–µ—Ä–µ–¥–∞–π —ó–π –Ω–æ–º–µ—Ä –ø—Ä–æ–º—ñ—Å—É (position), —â–æ —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è, —ñ –∑–∞—Ç—Ä–∏–º–∫—É, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ –ø–µ—Ä—à—É –∑–∞—Ç—Ä–∏–º–∫—É (delay), –≤–≤–µ–¥–µ–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º, —ñ –∫—Ä–æ–∫ (step).

function createPromise(position, delay) {
  const shouldResolve = Math.random() > 0.3;
  if (shouldResolve) {
    // Fulfill
  } else {
    // Reject
  }
}

–î–æ–ø–æ–≤–Ω–∏ –∫–æ–¥ —Ñ—É–Ω–∫—Ü—ñ—ó createPromise —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –≤–æ–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞–ª–∞ –æ–¥–∏–Ω –ø—Ä–æ–º—ñ—Å, —è–∫–∏–π –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∞–±–æ –≤—ñ–¥—Ö–∏–ª—è—î—Ç—å—Å—è —á–µ—Ä–µ–∑ delay —á–∞—Å—É. –ó–Ω–∞—á–µ–Ω–Ω—è–º –ø—Ä–æ–º—ñ—Å—É –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –æ–±'—î–∫—Ç, –≤ —è–∫–æ–º—É –±—É–¥—É—Ç—å –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ position —ñ delay –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ –æ–¥–Ω–æ–π–º–µ–Ω–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–æ–≥–æ, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏ –∑ –ø—Ä–æ–º—ñ—Å–æ–º - –≤–∏–∫–æ–Ω–∞—Ç–∏ –∞–±–æ –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏.

createPromise(2, 1500)
  .then(({ position, delay }) => {
    console.log(`‚úÖ Fulfilled promise ${position} in ${delay}ms`);
  })
  .catch(({ position, delay }) => {
    console.log(`‚ùå Rejected promise ${position} in ${delay}ms`);
  });

–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
–£–í–ê–ì–ê
–ù–∞—Å—Ç—É–ø–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π –¥–ª—è –∑–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è, –∞–ª–µ –±—É–¥–µ —Ö–æ—Ä–æ—à–æ—é –¥–æ–¥–∞—Ç–∫–æ–≤–æ—é –ø—Ä–∞–∫—Ç–∏–∫–æ—é.

–î–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ, –∑–∞–º—ñ—Å—Ç—å console.log(), –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É notiflix.
*/

import Notiflix from 'notiflix';

const form = document.querySelector('.form');

form.addEventListener('submit', (e) => {
  e.preventDefault();
  const delay = parseInt(form.elements.delay.value);
  const step = parseInt(form.elements.step.value);
  const amount = parseInt(form.elements.amount.value);

  if (delay <= 0 || step < 0 || amount < 0) {
    return Notiflix.Report.warning(
      'Opsss....üßü‚Äç‚ôÇÔ∏è',
      'The number must be greater than 0',
      'Try again'
    );
  }

  for (let i = 0; i < amount; i++) {
    createPromise(i, delay + step * i)
      .then(({ position, delay }) => {
        Notiflix.Notify.success(
          `‚úÖ Fulfilled promise ${position} in ${delay}ms`
        );
      })
      .catch(({ position, delay }) => {
        Notiflix.Notify.failure(
          `‚ùå Rejected promise ${position} in ${delay}ms`
        );
      });
  }
});

function createPromise(position, delay) {
  return new Promise((res, rej) => {
    const shouldResolve = Math.random() > 0.3;

    setTimeout(() => {
      if (shouldResolve) {
        // Fulfill
        res({ position, delay });
      } else {
        // Reject
        rej({ position, delay });
      }
    }, delay);
  });
}

// ------- next variant ------------------------------------------------------------

// const form = document.querySelector('form.form');
// form.addEventListener('click', onPromiseCreate);

// function createPromise(position, delay) {
//   return new Promise((resolve, reject) => {
//     const shouldResolve = Math.random() > 0.3;
//     setTimeout(() => {
//       if (shouldResolve) {
//         resolve({ position, delay });
//       } else {
//         reject({ position, delay });
//       }
//     }, delay);
//   });
// }

// function onPromiseCreate(e) {
//   e.preventDefault();
//   const { delay, step, amount } = e.currentTarget.elements;
//   let inputDelay = Number(delay.value);
//   let inputStep = Number(step.value);
//   let inputAmount = Number(amount.value);

//   for (let i = 1; i <= inputAmount; i += 1) {
//     inputDelay += inputStep;

//     createPromise(i, inputDelay)
//       .then(({ position, delay }) => {
//         Notify.success(
//           `‚úÖ Fulfilled promise ${position} in ${delay}ms`
//         );
//       })
//       .catch(({ position, delay }) => {
//         Notify.failure(
//           `‚ùå Rejected promise ${position} in ${delay}ms`
//         );
//       });
//     e.currentTarget.reset();
//   }
// }
